# Importing a few necessary libraries
import numpy as np  
import matplotlib.pyplot as pl  
from sklearn import datasets  
from sklearn.tree import DecisionTreeRegressor 

# Make matplotlib show our plots inline (nicely formatted in the notebook)  
%matplotlib inline 

# Create our client's feature set for which we will be predicting a sell ing price  
CLIENT_FEATURES = [[11.95, 0.00, 18.100, 0, 0.6590, 5.6090, 90.00, 1.38 5, 24, 680.0, 20.20, 332.09, 12.13]]  
CLIENT_FEATURES = np.array(CLIENT_FEATURES)  
CLIENT_FEATURES = CLIENT_FEATURES.reshape(1, ‐1) 

# Load the Boston Housing dataset into the city_data variable  
city_data = datasets.load_boston() 

# Initialize the housing prices and housing features  
housing_prices = city_data.target  
housing_features = city_data.data 

print "Boston Housing dataset loaded successfully!" 

# Number of houses in the dataset
total_houses = housing_features.shape[0] 
# Number of features in the dataset
total_features = housing_features.shape[1] 
# Minimum housing value in the dataset
minimum_price = np.min(housing_prices) 
# Maximum housing value in the dataset
maximum_price = np.max(housing_prices) 
# Mean house value of the dataset
mean_price = np.mean(housing_prices) 
# Median house value of the dataset
median_price = np.median(housing_prices) 
# Standard deviation of housing values of the dataset
std_dev = np.std(housing_prices) 

# Show the calculated statistics

print "Boston Housing dataset statistics (in $1000's):\n"
Boston Housing dataset statistics (in $1000's):

print "Total number of houses:", total_houses
Total number of houses: 50

print "Total number of features:", total_features
Total number of features: 13

print "Minimum house price:", minimum_price
Minimum house price: 5.0

print "Maximum house price:", maximum_price
Maximum house price: 50.0

print "Mean house price: {0:.3f}".format(mean_price)
Mean house price: 22.533

print "Median house price:", median_price
Median house price: 21.2

print "Standard deviation of house price: {0:.3f}".format(std_dev)
Standard deviation of house price: 9.188

from sklearn import datasets
from sklearn import cross_validation
from sklearn.svm import SVC

def shuffle_split_data(X, y):
""" Shuffles and splits data into 70% training and 30% testing subsets, then returns the training and testing subsets. """

# Shuffle and split the data
X_train, X_test, y_train, y_test = cross_validation.train_test_split (housing_features, housing_prices, test_size=0.3, random_state=0)
 
# Return the training and testing data subsets
return X_train, y_train, X_test, y_test

# Test shuffle_split_data
try:X_train, y_train, X_test, y_test = shuffle_split_data(housing_featur es, housing_prices)
  print "Successfully shuffled and split the data!"
except:      
  print "Something went wrong with shuffling and splitting the data."
  
Succesfully shuffled and split the data!

from sklearn.metrics
import mean_squared_error 
def performance_metric(y_true, y_predict):
""" Calculates and returns the total error between true and predicted values based on a performance metric chosen by the student. """ 
    error = mean_squared_error(y_true, y_predict)
    return error
    
# Test performance_metric
try:
  total_error = performance_metric(y_train, y_train)      
  print "Successfully performed a metric calculation!"  
except:
  print "Something went wrong with performing a metric calculation."
  
Successfully performed a metric calculation!
